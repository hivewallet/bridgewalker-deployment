---
- hosts: graphite
  user: jan
  gather_facts: no
  vars:
    home: /home/jan
  tasks:
  - name: install additional Ansible dependencies
    command: /usr/bin/aptitude -y install python-apt
                creates=/usr/share/doc/python-apt
    sudo: yes

  - name: install Debian packages
    apt: pkg=$item state=present
    with_items:
      - screen
      - htop
      - graphite-carbon
      - python-cairo
      - python-django
      - python-django-tagging
      - sqlite3
      - gunicorn
      - apache2-utils
      - nginx
    sudo: yes

  - name: configure graphite-carbon (carbon.conf)
    copy: src=files_graphite/etc/carbon/carbon.conf
          dest=/etc/carbon/carbon.conf
          owner=root
          group=root
    sudo: yes

  - name: configure graphite-carbon (storage-schemas.conf)
    copy: src=files_graphite/etc/carbon/storage-schemas.conf
          dest=/etc/carbon/storage-schemas.conf
          owner=root
          group=root
    sudo: yes

  - name: activate graphite-carbon
    copy: src=files_graphite/etc/default/graphite-carbon
          dest=/etc/default/graphite-carbon
          owner=root
          group=root
    sudo: yes

  - name: start grahite-carbon (service carbon-cache)
    service: name=carbon-cache state=started
    sudo: yes

  - name: download grahite-web
    command: /usr/bin/wget https://github.com/downloads/graphite-project/graphite-web/graphite-web-$graphite_web_version.tar.gz
                creates=$home/graphite-web-$graphite_web_version.tar.gz

  - name: extract graphite-web
    command: /bin/tar xzf graphite-web-$graphite_web_version.tar.gz
                creates=$home/graphite-web-$graphite_web_version

  - name: create link to active graphite-web version
    file: src=$home/graphite-web-$graphite_web_version
          dest=$home/graphite-web
          state=link

  - name: add local_settings.py for graphite-web
    copy: src=files_graphite/home/jan/graphite-web/webapp/graphite/local_settings.py
          dest=$home/graphite-web/webapp/graphite/local_settings.py

  - name: create necessary folders for graphite-web
    file: path=$item
          state=directory
    with_items:
      - $home/graphite-web/storage
      - $home/graphite-web/storage/log
      - $home/graphite-web/storage/log/webapp

  - name: prepare database for graphite-web
    command: /usr/bin/python manage.py syncdb --noinput
             chdir=$home/graphite-web/webapp/graphite
             creates=$home/graphite-web/storage/graphite.db

  - name: add dashboard configuration
    copy: src=files_graphite/home/jan/graphite-web/storage/dashboard_backup.sql
          dest=$home/graphite-web/storage/dashboard_backup.sql
    notify: import dashboard configuration

  - name: configure gunicorn to serve graphite
    copy: src=files_graphite/etc/gunicorn.d/graphite
          dest=/etc/gunicorn.d/graphite
          owner=root
          group=root
    sudo: yes
    notify: restart gunicorn

  - name: add nginx configuration for graphite
    copy: src=files_graphite/etc/nginx/sites-available/graphite
          dest=/etc/nginx/sites-available/graphite
          owner=root
          group=root
    sudo: yes
    notify: restart nginx

  - name: add htpasswd for graphite
    copy: src=files_graphite/etc/nginx/graphite.htpasswd
          dest=/etc/nginx/graphite.htpasswd
          owner=www-data
          group=www-data
          mode=600
    sudo: yes
    notify: restart nginx

  - name: create certs folder for nginx
    file: path=/etc/nginx/certs
          state=directory
          owner=www-data
          group=www-data
          mode=700
    sudo: yes

  - name: create self-signed SSL cert
    command: openssl req -new -nodes -x509 -subj "/CN=${graphite_fqdn}"
                -days 3650 -keyout /etc/nginx/certs/bw-graphite.key
                -out /etc/nginx/certs/bw-graphite.crt -extensions v3_ca
                creates=/etc/nginx/certs/bw-graphite.crt
    sudo: yes
    notify: restart nginx

  - name: ensure that SSL cert is owned by www-data
    file: path=$item
          state=file
          owner=www-data
          group=www-data
          mode=600
    with_items:
      - /etc/nginx/certs/bw-graphite.crt
      - /etc/nginx/certs/bw-graphite.key
    sudo: yes
    notify: restart nginx

  - name: disable default nginx configuration
    file: path=/etc/nginx/sites-enabled/default
          state=absent
    sudo: yes
    notify: restart nginx

  - name: enable nginx configuration for graphite
    file: src=/etc/nginx/sites-available/graphite
          dest=/etc/nginx/sites-enabled/graphite
          state=link
    sudo: yes
    notify: restart nginx

  - name: prepare iptables configuration framework (folders)
    file: path=$item
          state=directory
    with_items:
      - /etc/iptables
      - /etc/iptables/rules.d
    sudo: yes

  - name: prepare iptables configuration framework (header & footer)
    copy: src=files_graphite/$item
          dest=$item
          owner=root
          group=root
    with_items:
      - /etc/iptables/rules.d/00-header
      - /etc/iptables/rules.d/99-footer
    sudo: yes
    notify: refresh iptables configuration

  - name: load iptables configuration at boot
    copy: src=files_graphite/etc/network/if-up.d/iptables
          dest=/etc/network/if-up.d/iptables
          owner=root
          group=root
          mode=755
    sudo: yes

  - name: add iptables rule to only allow a whitelisted host to push metrics
    template: src=files_graphite/etc/iptables/rules.d/10-whitelist_metricsd.j2
              dest=/etc/iptables/rules.d/10-whitelist_metricsd
              owner=root
              group=root
    sudo: yes
    notify: refresh iptables configuration

  - name: create user 'bwbackup' for backup purposes
    action: user name=bwbackup shell=/bin/bash state=present
    sudo: yes

  - name: allow login from backup tool on main host
    authorized_key: user=bwbackup
                    key="{{ lookup('file', 'files/root/ssh/id_dsa.pub') }}"
    sudo: yes

  - name: create backup destination folder
    file: path=/home/bwbackup/backupninja
          state=directory
          owner=bwbackup
          group=bwbackup
    sudo: yes

  - name: add script to check backup size
    copy: src=files_graphite/home/bwbackup/check-backup-size
          dest=/home/bwbackup/check-backup-size
          owner=bwbackup
          group=bwbackup
          mode=700
    sudo: yes

  - name: add crontab entry to check backup size a few times a day
    cron: name="Check backup size"
          hour="*/3"
          job="/home/bwbackup/check-backup-size"
          user=bwbackup
    sudo: yes

  handlers:
  - name: restart nginx
    service: name=nginx state=restarted
    sudo: yes

  - name: restart gunicorn
    service: name=gunicorn state=restarted
    sudo: yes

  - name: refresh iptables configuration
    shell: cat /etc/iptables/rules.d/* > /etc/iptables/iptables.conf
    sudo: yes
    notify: reload iptables configuration

  - name: reload iptables configuration
    command: /etc/network/if-up.d/iptables
    sudo: yes

  - name: import dashboard configuration
    shell: /usr/bin/sqlite3 $home/graphite-web/storage/graphite.db
            < $home/graphite-web/storage/dashboard_backup.sql
